Применение шейпов для задействия их в системе табов, скрывая\отображая любые контентные блоки на странице
Загрузка контента производится при загрузке страницы



- Создается Zero
Добавляются табы-шейпы.
Каждому табу, либо его верхнему слою, например, слою типажа градиента, задается класс .tabbtn
Слой с классом можно оставить прозрачным, скрипт позволит задать для всех:
Цвет фона, цвет бордера и скругление элемента, если это шейп типажа кнопки
Цвет и непрозрачность градиента, если это шейп над изображением

- Добавляется код в блок 123
В коде применяется упорядоченное сопоставление между табами и заданными им блоками контента для отображения
В слоях табы должны следовать последовательно: сначала таб1, затем таб2 и тд. Блоки отображаемого контента указываются по порядку, в котором станут соответствовать своим табам для отображения
Здесь .tn-elem__6663057451699839993267 - это класс таба - верхний слой шейпа или его градиента. Определяется через инспектор кода
#rec616589728 - это id блока, который необходимо отображать соответствующим табом. 



# Стилизация простых цветных шейпов с текстом на подобии кнопок. Для читаемости текста, предполагается применение светлых оттенков цвета.
Стилизация заключается в изначальном создании прозрачного бордера установленного цвета, при наведении - задание цвета бордера, а при выборе таба - сохранение цвета фона.
<style>
/* Дефолтные стили табов */
.t396__elem.tabbtn .tn-atom {
  background-color: #FFEA96 !important;
  border: 4px solid transparent;
  border-radius: 30px;
  transition: border-color 0.3s, opacity 0.3s;
}

/* Стиль табов при наведении */
.t396__elem.tabbtn .tn-atom:hover {
  border-color: #F79431 !important;
  }
  
/* Стиль активного (выбранного) таба */
.t396__elem.tabbtn.active .tn-atom {
  background-color: #F79431 !important;
}
</style>


# Стилизации шейпов с изображениями и текстом. Для читаемости текста на фоне изображения применяется дополнительный слой градиента, насыщенность, цвет и положение которого задаются в коде.
Поэтапно: изображения устанавливаются в шейп, поверх него устанавливается дублирующий слой с градиентом, поверх слоя градиента устанавливается текст.
Стилизация заключается в снижении непрозрачности градиента, при наведении на таб, проявляя изображение, а при выборе таба - сохраняя сниженную непрозрачность.
<style>
/* Дефолтные стили табов */
.t396__elem.tabbtn .tn-atom {
  background-image: linear-gradient(0turn, rgba(0,0,0,1) 0%, rgba(0,0,0,0) 100%) !important;
  transition: opacity 0.3s;
}

/* Стиль табов при наведении */
.t396__elem.tabbtn .tn-atom:hover {
  opacity: 20%;
  }
  
/* Стиль активного (выбранного) таба */
.t396__elem.tabbtn.active .tn-atom {
  opacity: 20%;
}
</style>


<script>
  // Включение функционала скрытия\отображения контентных блоков по классам элементов для id блоков ниже
  document.addEventListener("DOMContentLoaded", function(){
  // Массив таб-элементов
  const elements = document.querySelectorAll([
    '.tn-elem__6663057451699839993267',
    '.tn-elem__6663057451699839586492',
    '.tn-elem__6663057451699839795359',
    '.tn-elem__6663057451699839798190'
    ]);

  // Массив ID блоков конента
  const blocks = [
    ["#rec667079129", "#rec667161790"],
    ["#rec667079279", "#rec667162189"],
    ["#rec667079289"],
    ["#rec667079293"],
  ];

  function showTab(id) {

    // Скрытие всех блоков при загрузке страницы
    blocks.forEach(pair => {
      pair.forEach(element => {
        // $(element).hide();  // Эквивалентно: document.querySelector(element).style.display = 'none';
        // Но визуальный контент не прогуружался, поэтому было выбрано применение отображения с изменением позиционирования: 
        // document.querySelector(element).style.visibility = 'hidden';
        // document.querySelector(element).style.position = 'fixed';
        // Или тоже самое на переменной:
          const el = document.querySelector(element);
          el.style.visibility = 'hidden';
          el.style.position = 'fixed';
      });
    });
    
    // Отображение только тех блоков, которые соответствуют выбранному табу
    blocks[id].forEach(element => {
      // $(element).show();  // Эквивалентно: document.querySelector(element).style.display = 'block';
      // Далее вариант с отображением и позиционированием:
      // document.querySelector(element).style.visibility = 'visible';
      // document.querySelector(element).style.position = 'relative';
      // Или тоже самое на переменной:
        const el = document.querySelector(element);
        el.style.visibility = 'visible';
        el.style.position = 'relative';
    });
    
    // Обновить внешний вид табов. Установить активный стиль для выбранного таба и снять его с остальных
    elements.forEach((element, index) => {
      if (index === id) {
        element.classList.add('active');
      } else {
        element.classList.remove('active');
      }
    });
  }
  
  // Добавление обработчика событий на все элементы
  elements.forEach((element, index) => {
    element.addEventListener('click', () => showTab(index));
  });

  // Отображение первого таба по умолчанию
  showTab(0);
});



// Преобразование блока табов в карусель
$('#rec666333941').find($('.t396__artboard')).kinetic({
    cursor: 'grab',
    x: true,
    y: true,
    filterTarget: function(target, e){
        if (!/down|start/.test(e.type)){
            return !(/area|a|input/i.test(target.tagName));
        }
    }
});
</script>

<script src="https://cdn.jsdelivr.net/npm/jquery.kinetic/jquery.kinetic.js"></script>





=========================== Дополнительное при недогрузке визуального контента ==============================
Если присутствует отложенная загрузка контента, то её прерывание сокрытием элементов может привести к тому, что в контентных блоках могут быть незагруженные изображения - полное их отсутствие или только их размытый образ


- Можно выполнять принудительную загрузку, во время загрузки веб-страницы. Дополнив основной код функцией вконце.
Аналогично, можно загружать и другой тип контента. например шрифтов: document.fonts.ready.then(() => { /* код после загрузки шрифтов */ })

 <script>
 document.addEventListener("DOMContentLoaded", function(){
  // ... весь основной код выше перед закрывающими скобками }); ...

  // Добавление обработки события загрузки всего контента страницы
  window.addEventListener('load', () => {

        // Принудительная загрузка всех изображений на странице
        document.querySelectorAll('img').forEach(img => {
            img.src = img.src;
        });

        // Принудительная загрузка всех видео на странице
        document.querySelectorAll('video').forEach(video => {
          video.load();
        });

    }); // Скобки, закрывающие новую функцию

}); // Скобки, закрывающие весь функционал, в том числе выше изложенного кода с работой табов
</script>




- Можно выполнять загрузку изображений в контенте, когда выбран соответствующий таб. Изображения станут загружаться только при выборе соответствующего таба. 

 <script>
 document.addEventListener("DOMContentLoaded", function(){
  // ... ваш текущий код для табов и отображения контента ...

  // Альтернативная фукнция showTab с добавленной обработкой события загрузки всего контента страницы
    function showTab(id) {
        // Скрытие всех блоков при загрузке страницы
        blocks.forEach(pair => {
            pair.forEach(element => {
                $(element).hide();
            });
        });

        // и показываем только те, которые соответствуют выбранному табу
        blocks[id].forEach(element => {
            $(element).show();

            // Принудительно загружаем все изображения в отображаемом блоке
            $(element).find('img').each(function() {
                this.src = this.src;
            });
        });

        // Устанавливаем активный таб
        elements.forEach((element, index) => {
            if (index === id) {
                element.classList.add('active');
            } else {
                element.classList.remove('active');
            }
        });
    }

    // Добавление обработчика событий на все элементы
  elements.forEach((element, index) => {
    element.addEventListener('click', () => showTab(index));
  });

  // Отображение первого таба по умолчанию
  showTab(0);
});
</script>




- Использовать атрибут data-src для хранения URL изображения. После того, как таб активируется, вы можете загрузить изображение, установив его как атрибут src
      // ... Код выше
      const images = contentBlocks[id].querySelectorAll('img[data-src]');
        images.forEach(image => {
          image.setAttribute('src', image.getAttribute('data-src'));
        });
      // ... Код ниже