============================================ Хлебные крошки ===========================================
<nav class="breadcrumbs">
      <a href="/">Главная страница</a>
      <p> → </p>
      <a href="/catalog">Каталог товаров</a>
      <p> → </p>
      <a href="#product_section">Раздел</a>
      <p> → </p>
      <p>Страница товара</p>
</nav>

<style>
.breadcrumbs {
  display: inline-flex;
  flex-wrap: wrap;
  align-items: center;
  gap: 2px 2px;
  position: relative;
}

.t396__elem .breadcrumbs a, 
.t396__elem .breadcrumbs p {
  position: relative;
  width: fit-content;
  font-family: "Philosopher" !important;
  font-weight: 600;
  color: #000000 !important;
  font-size: 18px;
  white-space: nowrap;
}

.t396__elem.tn-elem .breadcrumbs p:last-child {
    color: #F8A95A !important;
}

.t396__elem.tn-elem .breadcrumbs a:hover {
    color: #F8A95A !important;
}

==================================== Элемент хлебных крошек с обновляемой ссылкой =====================================
Элемент (например кнопка или текст) с первоначально установленной ссылкой #product_section, которая в дальнейшем будет заменена и станет вести на страницу (например товарного раздела) просматриваемого товара, на основе части пути в url текущей страницы.
Применяются методы split() и join(), чтобы разбить текущий URL на части по слешу (/) и затем соединить части в новый URL
Скрипт позволяет использовать любую позицию части в url, в данном примере предполагается, что значение категории находится во втором сегменте пути после хоста - начиная с 4 слеш-разделителя

$(document).ready(function() {
  // Ищем все ссылки с href="#product_section"
  $('a[href="#product_section"]').each(function() {
    // Разделяем текущий URL на части, используя слеш (/) в качестве разделителя
    let urlParts = window.location.href.split("/");
    // Удаляем ненужные части (начиная с 4-ого слеш разделителя)
    urlParts.splice(4);
    // Соединяем оставшиеся части обратно в строку URL, используя слеш (/) в качестве разделителя
    let newUrl = urlParts.join("/");
    // Заменяем href ссылки на новый URL
    $(this).attr("href", newUrl);
  });
});




========================= Элемент хлебных крошек с обновляемой ссылкой и текстом элемента ===========================
Обновляет как текст ссылки (например слово "Раздел" в череде хлебных крошек), так и её href атрибут, основываясь на текущем URL страницы и данных из ассоциативного массива
Массив включает наименования страниц сайта, для построения относительной ссылки на каждую из них, а также заменяя текст изначального элемента более представительным представлением соответствующего url элементу
Предполагается, что ключ категории находится во втором сегменте пути после хоста

$(document).ready(function() {
  // Ассоциативный массив 'найденная чать url': 'представление для замены текста'
  const categoriesMap = {
    'spices': 'Специи',
    'elephants': 'Слоны',
  };

  // Ищем все ссылки и параграфы с текстом "Раздел"
  $('a[href="#product_section"], p:contains("Раздел")').each(function() {
    // Разделяем текущий URL по слешам
    let urlParts = window.location.pathname.split('/');
    // Ищем категорию из URL, предполагая, что она находится во второй части URL массива
    let categoryKey = urlParts[1]; // например, 'spices' для URL https://indianfestival.ru/spices/...

    // Определяем название категории из ассоциативного массива
    let categoryName = categoriesMap[categoryKey];

    // Если категория найдена в массиве
    if (categoryName) {
      // Устанавливаем новый текст для параграфа или текст ссылки
      $(this).text(categoryName);
      
      // Строим и устанавливаем новую ссылку
      let newUrl = window.location.origin + '/' + categoryKey;
      if($(this).is('a')) { // Если элемент является ссылкой
        $(this).attr('href', newUrl);
      }
    }
  });
});




============================================ Кнопка "назад" ===========================================
Элемент (например кнопка) ведущая на предыдущую страницу в истории вкладки

<script>
$('a[href="#back"]').click(function() {
    history.back();
    return false;
})
</script>


Страница также может быть открыта в новой вкладке, что приведет к невозможности "вернуться назад", так как адрес предыдущей страницы не будет добавлен в историю переходов.
Поэтому, может вводиться проверка длины переходов window.history.lenght и если длина более 1, т.е. существует адрес предыдущей страницы, то отображать кнопку, если же предыдущей страницы нет в истории - то скрывать кнопку
<script>
$(document).ready(function() {
    $('a[href="#back"]').click(function() {
        history.back();
        return false;
    });

    // Проверка наличия истории переходов
    if (window.history.length > 1) {
        // Отображение кнопки "Назад"
        $('a[href="#back"]').show();
    } else {
        // Скрытие кнопки "Назад"
        $('a[href="#back"]').hide();
    }
});
</script>